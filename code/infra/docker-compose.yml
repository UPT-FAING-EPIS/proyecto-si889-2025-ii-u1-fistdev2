services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: devflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: devflow
      POSTGRES_USER: devflow_user
      POSTGRES_PASSWORD: devflow_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devflow_user -d devflow"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - devflow-network

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: devflow-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass redis_password
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - devflow-network

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    container_name: devflow-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://devflow_user:devflow_password@postgres:5432/devflow
      REDIS_URL: redis://:redis_password@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 1h
      BCRYPT_SALT_ROUNDS: 12
      CORS_ORIGIN: http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../backend/uploads:/app/uploads
      - ../backend/logs:/app/logs
    # healthcheck:
    #   test: ["CMD", "node", "-e", "process.exit(0)"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s
    networks:
      - devflow-network

  # Frontend Web
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: production
      args:
        NEXT_PUBLIC_API_URL: http://backend:3001/api/v1
        NEXT_PUBLIC_APP_NAME: DevFlow
        NEXT_PUBLIC_APP_VERSION: 1.0.0
    container_name: devflow-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://backend:3001/api/v1
      NEXT_PUBLIC_APP_NAME: DevFlow
      NEXT_PUBLIC_APP_VERSION: 1.0.0
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - devflow-network

  # FastAPI Admin Service (solo para administradores)
  fastapi-admin:
    build:
      context: ../fastapi-admin
      dockerfile: Dockerfile
    container_name: devflow-fastapi-admin
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      FASTAPI_PORT: 8000
      FASTAPI_HOST: 0.0.0.0
      ENVIRONMENT: production
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_ALGORITHM: HS256
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - devflow-network

  # Monitoreo con Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: devflow-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - devflow-network
    profiles:
      - monitoring

  # Grafana para visualización (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: devflow-grafana
    restart: unless-stopped
    ports:
      - "3003:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - devflow-network
    profiles:
      - monitoring

  # Exportador de métricas para PostgreSQL (opcional)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: devflow-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: postgresql://devflow_user:devflow_password@postgres:5432/devflow?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    networks:
      - devflow-network
    profiles:
      - monitoring

  # Exportador de métricas para Redis (opcional)
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: devflow-redis-exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: redis_password
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - devflow-network
    profiles:
      - monitoring

# Volúmenes persistentes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Red personalizada
networks:
  devflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
